// Generated by gencpp from file basic_ctrl/swing.msg
// DO NOT EDIT!


#ifndef BASIC_CTRL_MESSAGE_SWING_H
#define BASIC_CTRL_MESSAGE_SWING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace basic_ctrl
{
template <class ContainerAllocator>
struct swing_
{
  typedef swing_<ContainerAllocator> Type;

  swing_()
    : speed(0.0)
    , angular(0.0)
    , underarmF(0.0)
    , underarmB(0.0)  {
    }
  swing_(const ContainerAllocator& _alloc)
    : speed(0.0)
    , angular(0.0)
    , underarmF(0.0)
    , underarmB(0.0)  {
  (void)_alloc;
    }



   typedef float _speed_type;
  _speed_type speed;

   typedef float _angular_type;
  _angular_type angular;

   typedef float _underarmF_type;
  _underarmF_type underarmF;

   typedef float _underarmB_type;
  _underarmB_type underarmB;





  typedef boost::shared_ptr< ::basic_ctrl::swing_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::basic_ctrl::swing_<ContainerAllocator> const> ConstPtr;

}; // struct swing_

typedef ::basic_ctrl::swing_<std::allocator<void> > swing;

typedef boost::shared_ptr< ::basic_ctrl::swing > swingPtr;
typedef boost::shared_ptr< ::basic_ctrl::swing const> swingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::basic_ctrl::swing_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::basic_ctrl::swing_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::basic_ctrl::swing_<ContainerAllocator1> & lhs, const ::basic_ctrl::swing_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed &&
    lhs.angular == rhs.angular &&
    lhs.underarmF == rhs.underarmF &&
    lhs.underarmB == rhs.underarmB;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::basic_ctrl::swing_<ContainerAllocator1> & lhs, const ::basic_ctrl::swing_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace basic_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::basic_ctrl::swing_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::basic_ctrl::swing_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::basic_ctrl::swing_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::basic_ctrl::swing_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::basic_ctrl::swing_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::basic_ctrl::swing_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::basic_ctrl::swing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3f06838ecf36bbdb33f3bf9bd242376";
  }

  static const char* value(const ::basic_ctrl::swing_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3f06838ecf36bbdULL;
  static const uint64_t static_value2 = 0xb33f3bf9bd242376ULL;
};

template<class ContainerAllocator>
struct DataType< ::basic_ctrl::swing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "basic_ctrl/swing";
  }

  static const char* value(const ::basic_ctrl::swing_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::basic_ctrl::swing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 speed\n"
"float32 angular\n"
"float32 underarmF\n"
"float32 underarmB \n"
;
  }

  static const char* value(const ::basic_ctrl::swing_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::basic_ctrl::swing_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.angular);
      stream.next(m.underarmF);
      stream.next(m.underarmB);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct swing_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::basic_ctrl::swing_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::basic_ctrl::swing_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "angular: ";
    Printer<float>::stream(s, indent + "  ", v.angular);
    s << indent << "underarmF: ";
    Printer<float>::stream(s, indent + "  ", v.underarmF);
    s << indent << "underarmB: ";
    Printer<float>::stream(s, indent + "  ", v.underarmB);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASIC_CTRL_MESSAGE_SWING_H
