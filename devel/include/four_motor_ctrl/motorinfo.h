// Generated by gencpp from file four_motor_ctrl/motorinfo.msg
// DO NOT EDIT!


#ifndef FOUR_MOTOR_CTRL_MESSAGE_MOTORINFO_H
#define FOUR_MOTOR_CTRL_MESSAGE_MOTORINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace four_motor_ctrl
{
template <class ContainerAllocator>
struct motorinfo_
{
  typedef motorinfo_<ContainerAllocator> Type;

  motorinfo_()
    : T(0.0)
    , W(0.0)
    , LW(0.0)
    , Acc(0.0)
    , Pos(0.0)
    , KP(0.0)
    , KW(0.0)
    , mode(0)
    , pos_joy1(0.0)  {
    }
  motorinfo_(const ContainerAllocator& _alloc)
    : T(0.0)
    , W(0.0)
    , LW(0.0)
    , Acc(0.0)
    , Pos(0.0)
    , KP(0.0)
    , KW(0.0)
    , mode(0)
    , pos_joy1(0.0)  {
  (void)_alloc;
    }



   typedef float _T_type;
  _T_type T;

   typedef float _W_type;
  _W_type W;

   typedef float _LW_type;
  _LW_type LW;

   typedef float _Acc_type;
  _Acc_type Acc;

   typedef float _Pos_type;
  _Pos_type Pos;

   typedef float _KP_type;
  _KP_type KP;

   typedef float _KW_type;
  _KW_type KW;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef float _pos_joy1_type;
  _pos_joy1_type pos_joy1;





  typedef boost::shared_ptr< ::four_motor_ctrl::motorinfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::four_motor_ctrl::motorinfo_<ContainerAllocator> const> ConstPtr;

}; // struct motorinfo_

typedef ::four_motor_ctrl::motorinfo_<std::allocator<void> > motorinfo;

typedef boost::shared_ptr< ::four_motor_ctrl::motorinfo > motorinfoPtr;
typedef boost::shared_ptr< ::four_motor_ctrl::motorinfo const> motorinfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::four_motor_ctrl::motorinfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::four_motor_ctrl::motorinfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::four_motor_ctrl::motorinfo_<ContainerAllocator1> & lhs, const ::four_motor_ctrl::motorinfo_<ContainerAllocator2> & rhs)
{
  return lhs.T == rhs.T &&
    lhs.W == rhs.W &&
    lhs.LW == rhs.LW &&
    lhs.Acc == rhs.Acc &&
    lhs.Pos == rhs.Pos &&
    lhs.KP == rhs.KP &&
    lhs.KW == rhs.KW &&
    lhs.mode == rhs.mode &&
    lhs.pos_joy1 == rhs.pos_joy1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::four_motor_ctrl::motorinfo_<ContainerAllocator1> & lhs, const ::four_motor_ctrl::motorinfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace four_motor_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::four_motor_ctrl::motorinfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::four_motor_ctrl::motorinfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::four_motor_ctrl::motorinfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::four_motor_ctrl::motorinfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::four_motor_ctrl::motorinfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::four_motor_ctrl::motorinfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::four_motor_ctrl::motorinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2e51b2487914c67f91427adb33d8627";
  }

  static const char* value(const ::four_motor_ctrl::motorinfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2e51b2487914c67ULL;
  static const uint64_t static_value2 = 0xf91427adb33d8627ULL;
};

template<class ContainerAllocator>
struct DataType< ::four_motor_ctrl::motorinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "four_motor_ctrl/motorinfo";
  }

  static const char* value(const ::four_motor_ctrl::motorinfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::four_motor_ctrl::motorinfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 T\n"
"float32 W\n"
"float32 LW\n"
"float32 Acc \n"
"float32 Pos\n"
"float32 KP\n"
"float32 KW\n"
"int32 mode\n"
"float32 pos_joy1\n"
;
  }

  static const char* value(const ::four_motor_ctrl::motorinfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::four_motor_ctrl::motorinfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.T);
      stream.next(m.W);
      stream.next(m.LW);
      stream.next(m.Acc);
      stream.next(m.Pos);
      stream.next(m.KP);
      stream.next(m.KW);
      stream.next(m.mode);
      stream.next(m.pos_joy1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motorinfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::four_motor_ctrl::motorinfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::four_motor_ctrl::motorinfo_<ContainerAllocator>& v)
  {
    s << indent << "T: ";
    Printer<float>::stream(s, indent + "  ", v.T);
    s << indent << "W: ";
    Printer<float>::stream(s, indent + "  ", v.W);
    s << indent << "LW: ";
    Printer<float>::stream(s, indent + "  ", v.LW);
    s << indent << "Acc: ";
    Printer<float>::stream(s, indent + "  ", v.Acc);
    s << indent << "Pos: ";
    Printer<float>::stream(s, indent + "  ", v.Pos);
    s << indent << "KP: ";
    Printer<float>::stream(s, indent + "  ", v.KP);
    s << indent << "KW: ";
    Printer<float>::stream(s, indent + "  ", v.KW);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "pos_joy1: ";
    Printer<float>::stream(s, indent + "  ", v.pos_joy1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOUR_MOTOR_CTRL_MESSAGE_MOTORINFO_H
